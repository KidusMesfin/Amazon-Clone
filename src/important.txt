useEffect(() => {
		const handleScroll = () => {
			if (window.scrollY > 100) {
				handleShow(true);
			} else {
				handleShow(false);
			}
		};

		window.addEventListener("scroll", handleScroll);

		return () => {
			window.removeEventListener("scroll", handleScroll);
});






 //     //paymentIntent = payment confirmation
  //     db.collection ('users')
  //       .doc (user?.uid)
  //       .collection('orders')
  //       .doc (paymentIntent.id)
  //       .set({
  //         basket: basket,
  //         amount: paymentIntent.amount,
  //         created: paymentIntent.created
  //   });




  import React, { useEffect, useState } from "react";
import "./Orders.css";
import { db } from "./Firebase";
import { useStateValue } from "./StateProvider";
import Order from "./Order";

function Orders() {
	const [{ basket, user }, dispatch] = useStateValue();
	const [orders, setOrders] = useState([]);

	useEffect(() => {
		const fetchOrders = async () => {
			if (user) {
				const snapshot = await db
					.collection("users")
					.doc(user.uid)
					.collection("orders")
					.orderBy("created", "desc")
					.get();

				const ordersData = snapshot.docs.map((doc) => ({
					id: doc.id,
					data: doc.data(),
				}));

				setOrders(ordersData);
			} else {
				setOrders([]);
			}
		};

		fetchOrders();
	}, [user]);

	return (
		<div className="orders">
			<h1>Your Orders</h1>
			<div className="orders__order">
				{orders.map((order) => (
					<Order key={order.id} order={order} />
				))}
			</div>
		</div>
	);
}

export default Orders;
// npm uninstall firebase-admin  firebase-functions eslint eslint-config-google firebase-functions-test
//npm uninstall eslint eslint-config-google firebase-functions-test
//eslint eslint-config-google firebase-functions-test




import React from "react";
import "./Order.css";
import moment from "moment";
import CheckoutProduct from "./CheckoutProduct";
import CurrencyFormat from "react-currency-format";
import Orders from "./Orders";
function Order({ order }) {
	return (
		<div className="order">
			<h2>Order</h2>
			<p>{moment.unix(order.data.created).format("MMMM Do YYYY, h:mma")}</p>
			<p className="order__id">
				<small>{order.id}</small>
			</p>
			{order.data.basket?.map((item) => (
				<CheckoutProduct
					key={item.id}
					id={item.id}
					title={item.title}
					image={item.image}
					price={item.price}
					rating={item.rating}
					hideButton
				/>
			))}
			<CurrencyFormat
				renderText={(value) => (
					<h3 className="order__total">Order Total: {value}</h3>
				)}
				decimalScale={2}
				value={order.data.amount / 100}
				displayType={"text"}
				thousandSeparator={true}
				prefix={"$"}
			/>
		</div>
	);
}

export default Order;